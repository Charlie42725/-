// ======================================
// 🏗️ 一番賞網站 Prisma Schema (for Neon)
// Database: PostgreSQL (Neon)
// Author: FuturiX Dev
// ======================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")       // <- Neon Connection Pooler
  directUrl = env("DIRECT_URL")        // <- 用於 migrations 和 Prisma Studio
}

// -----------------------------
// 🔹 品牌 / IP
// -----------------------------
model Brand {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  logoUrl     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  series      Series[]
}

// -----------------------------
// 🔹 系列
// -----------------------------
model Series {
  id          Int       @id @default(autoincrement())
  brand       Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId     Int
  name        String
  slug        String
  description String?
  coverImage  String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products    Product[]

  @@unique([brandId, slug])
}

// -----------------------------
// 🔹 商品
// -----------------------------
model Product {
  id               Int             @id @default(autoincrement())
  series           Series          @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId         Int
  name             String
  slug             String
  shortDescription String?
  longDescription  String?
  price            Int
  totalTickets     Int             @default(0)
  soldTickets      Int             @default(0)
  status           ProductStatus   @default(draft)
  coverImage       String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  variants         ProductVariant[]
  images           Image[]
  logs             ProductLog[]
  lotteryDraws     LotteryDraw[]

  @@unique([seriesId, slug])
  @@index([slug])
  @@index([status])
  @@index([seriesId])
}

// -----------------------------
// 🔹 商品獎項 / 版本
// -----------------------------
model ProductVariant {
  id           Int           @id @default(autoincrement())
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    Int
  prize        String        // 賞等 (A賞、B賞、C賞、Last賞等)
  name         String        // 獎項名稱 (特等獎公仔、限定海報等)
  rarity       String?       // 稀有度 (SSR/SR/R/N)
  stock        Int           @default(0)
  imageUrl     String?
  isActive     Boolean       @default(true)
  isLastPrize  Boolean       @default(false)  // 標記為 Last 賞
  probability  Float?        // 自定義抽中機率 (0-1)
  createdAt    DateTime      @default(now())

  lotteryDraws LotteryDraw[]

  @@index([productId])
}

// -----------------------------
// 🔹 圖片庫
// -----------------------------
model Image {
  id         Int       @id @default(autoincrement())
  product    Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int?
  url        String
  type       ImageType @default(gallery)
  sortOrder  Int       @default(0)
  createdAt  DateTime  @default(now())
}

// -----------------------------
// 🔹 會員用戶
// -----------------------------
model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  passwordHash      String
  nickname          String
  gender            Gender?
  phone             String?   @unique
  points            Int       @default(0)  // 點數餘額
  isEmailVerified   Boolean   @default(false)
  isPhoneVerified   Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  orders            Order[]
  pointTransactions PointTransaction[]
  lotteryDraws      LotteryDraw[]

  @@index([email])
  @@index([phone])
}

// -----------------------------
// 🔹 驗證碼記錄
// -----------------------------
model VerificationCode {
  id         Int       @id @default(autoincrement())
  type       CodeType  // email 或 phone
  target     String    // email 地址或手機號碼
  code       String    // 驗證碼
  expiresAt  DateTime  // 過期時間
  isUsed     Boolean   @default(false)
  createdAt  DateTime  @default(now())

  @@index([target, type, isUsed])
}

// -----------------------------
// 🔹 後台管理員
// -----------------------------
model AdminUser {
  id            Int        @id @default(autoincrement())
  username      String     @unique
  passwordHash  String
  role          AdminRole  @default(editor)
  createdAt     DateTime   @default(now())

  logs          ProductLog[]
}

// -----------------------------
// 🔹 商品操作紀錄 (上架 / 下架 / 更新)
// -----------------------------
model ProductLog {
  id         Int         @id @default(autoincrement())
  product    Product?    @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId  Int?
  admin      AdminUser?  @relation(fields: [adminId], references: [id], onDelete: SetNull)
  adminId    Int?
  action     String
  message    String?
  createdAt  DateTime    @default(now())
}

// -----------------------------
// 🔹 訂單
// -----------------------------
model Order {
  id              Int          @id @default(autoincrement())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  orderNumber     String       @unique  // 訂單編號
  packageName     String       // 方案名稱
  basePoints      Int          // 基礎點數
  bonusPoints     Int          // 贈送點數
  totalPoints     Int          // 總點數
  amount          Int          // 支付金額
  status          OrderStatus  @default(pending)
  paymentMethod   String?      // 付款方式
  paymentInfo     String?      // 付款資訊 (JSON)
  paidAt          DateTime?    // 付款時間
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
}

// -----------------------------
// 🔹 點數異動紀錄
// -----------------------------
model PointTransaction {
  id            Int                    @id @default(autoincrement())
  user          User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  type          PointTransactionType   // 異動類型
  amount        Int                    // 異動點數 (正數為增加，負數為扣除)
  balance       Int                    // 異動後餘額
  description   String                 // 異動說明
  relatedId     String?                // 相關訂單/活動 ID
  createdAt     DateTime               @default(now())

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

// -----------------------------
// 🔹 抽獎記錄
// -----------------------------
model LotteryDraw {
  id              Int             @id @default(autoincrement())
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       Int
  variant         ProductVariant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId       Int
  ticketNumber    Int             // 抽到的號碼
  pointsUsed      Int             // 消耗的點數
  triggeredPity   Boolean         @default(false)  // 是否觸發保底
  isLastPrize     Boolean         @default(false)  // 是否為 Last 賞
  createdAt       DateTime        @default(now())

  @@index([userId])
  @@index([productId])
  @@index([variantId])
  @@index([createdAt])
  @@unique([productId, ticketNumber]) // 每個商品的每個號碼只能被抽一次
}

// -----------------------------
// 🔸 ENUM 定義
// -----------------------------
enum ProductStatus {
  draft
  active
  sold_out
  archived
}

enum ImageType {
  cover
  gallery
  variant
}

enum AdminRole {
  admin
  editor
}

enum Gender {
  male
  female
  other
}

enum CodeType {
  email
  phone
}

enum OrderStatus {
  pending       // 待付款
  paid          // 已付款
  completed     // 已完成
  cancelled     // 已取消
  failed        // 失敗
}

enum PointTransactionType {
  purchase      // 購買
  bonus         // 贈送
  lottery       // 抽獎消耗
  refund        // 退款
  admin_adjust  // 管理員調整
}
